version: "3.9"
services:
  couchbase1:
    tty: true
    stdin_open: true
    container_name: couchbase1
    image: couchbase/server
    restart: always
    volumes:
      - couchbase1-data:/data/couchbase1
    networks:
      hermes-network:
        ipv4_address: 172.16.101.11
    ports:
      - 8091:8091
      - 8092:8092
      - 8093:8093
      - 8094:8094
      - 11210:11210
    ulimits:
      nproc: 65535
      core:
        soft: 100000000
        hard: 100000000
      memlock:
        soft: 100000000
        hard: 100000000
      nofile:
        soft: 40960
        hard: 40960
  couchbase2:
    tty: true
    stdin_open: true
    restart: always
    container_name: couchbase2
    image: couchbase/server
    volumes:
      - couchbase2-data:/data/couchbase2
    networks:
      hermes-network:
        ipv4_address: 172.16.101.12
    links:
      - couchbase1
    depends_on:
      - couchbase1
    ports:
      - 18091:8091
      - 18092:8092
      - 18093:8093
      - 18094:8094
      - 21210:11210
  consul:
    image: consul
    restart: always
    ports:
      - "8500:8500"
      - "8600:8600/udp"
    expose:
      - "8500"
    command: agent -server -bootstrap -ui -client=0.0.0.0
    networks:
      hermes-network:
        ipv4_address: 172.16.101.14
  gateway:
    restart: always
    depends_on:
      - consul
    image: yalcinberkay/hermes-api-gateway
    build:
      context: .
      dockerfile: Dockerfile-Gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    networks:
      hermes-network:
        ipv4_address: 172.16.101.15
    ports:
      - "5001:5001"
    expose:
      - "5001"
    links:
      - consul
  user-api-1:
    container_name: user-api-node-1
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5011/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - consul
      - hermes_sqlserver
    image: yalcinberkay/hermes-user-api
    build:
      context: .
      dockerfile: Dockerfile-User-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://user-api-1:5011
    ports:
      - "5011:5011"
    expose:
      - "5011"
    networks:
      hermes-network:
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  advertisement-api-1:
    container_name: advertisement-api-node-1
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5021/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-advertisement-api
    build:
      context: .
      dockerfile: Dockerfile-Advertisement-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://advertisement-api-1:5021
    networks:
      hermes-network:
    ports:
      - "5021:5021"
    expose:
      - "5021"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  advertisement-api-2:
    container_name: advertisement-api-node-2
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5022/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-advertisement-api
    build:
      context: .
      dockerfile: Dockerfile-Advertisement-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://advertisement-api-2:5022
    networks:
      hermes-network:
    ports:
      - "5022:5022"
    expose:
      - "5022"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  catalog-api-1:
    container_name: catalog-api-node-1
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5031/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-catalog-api
    build:
      context: .
      dockerfile: Dockerfile-Catalog-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://catalog-api-1:5031
    networks:
      hermes-network:
    ports:
      - "5031:5031"
    expose:
      - "5031"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  catalog-api-2:
    container_name: catalog-api-node-2
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5032/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-catalog-api
    build:
      context: .
      dockerfile: Dockerfile-Catalog-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://catalog-api-2:5032
    networks:
      hermes-network:
    ports:
      - "5032:5032"
    expose:
      - "5032"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  location-api-1:
    container_name: location-api-node-1
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5041/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-location-api
    build:
      context: .
      dockerfile: Dockerfile-Location-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://location-api-1:5041
    networks:
      hermes-network:
    ports:
      - "5041:5041"
    expose:
      - "5041"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  location-api-2:
    container_name: location-api-node-2
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5042/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: always
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-location-api
    build:
      context: .
      dockerfile: Dockerfile-Location-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://location-api-2:5042
    networks:
      hermes-network:
    ports:
      - "5042:5042"
    expose:
      - "5042"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  media-api-1:
    container_name: media-api-node-1
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5051/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-media-api
    build:
      context: .
      dockerfile: Dockerfile-Media-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://media-api-1:5051
    networks:
      hermes-network:
    ports:
      - "5051:5051"
    expose:
      - "5051"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  media-api-2:
    container_name: media-api-node-2
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:5052/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-media-api
    build:
      context: .
      dockerfile: Dockerfile-Media-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://media-api-2:5052
    networks:
      hermes-network:
    ports:
      - "5052:5052"
    expose:
      - "5062"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  notification-api-1:
    container_name: notification-api-node-1
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4991/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-notification-api
    build:
      context: .
      dockerfile: Dockerfile-Notification-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://notification-api-1:4991
    networks:
      hermes-network:
    ports:
      - "4991:4991"
    expose:
      - "4991"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 200M
        reservations:
          memory: 20M
  notification-api-2:
    container_name: notification-api-node-2
    restart: always
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:4992/healthcheck" ]
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - consul
      - couchbase1
      - couchbase2
      - es01
    image: yalcinberkay/hermes-notification-api
    build:
      context: .
      dockerfile: Dockerfile-Notification-API
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - SERVICE_URL=http://notification-api-2:4992
    networks:
      hermes-network:
    ports:
      - "4992:4992"
    expose:
      - "4992"
    deploy:
      resources:
        limits:
          cpus: '0.75'
          memory: 150M
        reservations:
          memory: 20M
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.2
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
#      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/data/elasticsearch
    ports:
      - 9200:9200
    networks:
      - hermes-network
  kib01:
    depends_on:
      - es01
    image: docker.elastic.co/kibana/kibana:7.10.2
    container_name: kib01
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: http://es01:9200
    networks:
      - hermes-network
  postgres:
    restart: always
    image: postgres
    container_name: postgres_1
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-someadvancedpassword}
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    networks:
      - hermes-network
    ports:
      - 5432:5432
  pgadmin:
    container_name: pgadmin_container
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/root/.pgadmin
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    networks:
      - hermes-network
    restart: unless-stopped
  hermes_sqlserver:
    restart: always
    container_name: hermes_sqlserver
    image: "mcr.microsoft.com/mssql/server"
    ports:
      - 1433:1433
    networks:
      hermes-network:
        ipv4_address: 172.16.101.80
    volumes:
      - sqlserver:/data/sqserver
    environment:
      SA_PASSWORD: "Some@Advanced!Password"
      ACCEPT_EULA: "Y"
networks:
  hermes-network:
    name: hermes-network
    driver: bridge
    ipam:
      config:
        - subnet: 172.16.101.0/24
volumes:
  postgres:
  sqlserver:
  pgadmin:
  couchbase1-data:
  couchbase2-data:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local
